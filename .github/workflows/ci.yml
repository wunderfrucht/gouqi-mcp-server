name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Pre-commit checks (mirrors local pre-commit hooks)
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Create secrets baseline if missing
        run: |
          if [ ! -f .secrets.baseline ]; then
            echo '{}' > .secrets.baseline
          fi

      - name: Run pre-commit hooks
        run: pre-commit run --all-files

  # Code quality checks
  quality:
    name: Code quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check compilation
        run: cargo check --all-targets --all-features

  # Run tests
  test:
    name: Test suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test --all-targets --all-features

      - name: Run doc tests
        run: cargo test --doc

  # Security audit
  security:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  # Cross-platform build tests (mirrors npm-publish build matrix)
  build-matrix:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-14
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --package jira-mcp-server

      - name: Test binary exists (Unix)
        if: runner.os != 'Windows'
        run: test -f target/${{ matrix.target }}/release/jira-mcp-server

      - name: Test binary exists (Windows)
        if: runner.os == 'Windows'
        run: Test-Path target/${{ matrix.target }}/release/jira-mcp-server.exe
        shell: pwsh

      - name: Verify binary is executable (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x target/${{ matrix.target }}/release/jira-mcp-server
          file target/${{ matrix.target }}/release/jira-mcp-server
          echo "✓ Binary is executable"

      - name: Verify binary is executable (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-Item target/${{ matrix.target }}/release/jira-mcp-server.exe | Select-Object FullName, Length, LastWriteTime
          Write-Host "✓ Binary exists and is valid"
        shell: pwsh

  # Verify NPM packaging structure
  npm-structure:
    name: Verify NPM structure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Verify main package structure
        working-directory: npm
        run: |
          echo "Checking npm package.json..."
          test -f package.json
          jq -e '.name == "@wunderfrucht/jira-mcp-server"' package.json
          jq -e '.main' package.json
          jq -e '.bin' package.json
          echo "✓ Main package structure valid"

      - name: Verify platform packages
        run: |
          for platform in darwin-arm64 darwin-x64 linux-x64 win32-x64; do
            echo "Checking platform-packages/$platform..."
            test -f "platform-packages/$platform/package.json"
            jq -e ".name == \"@wunderfrucht/jira-mcp-server-$platform\"" "platform-packages/$platform/package.json"
            echo "✓ $platform package valid"
          done

      - name: Verify install script
        working-directory: npm
        run: |
          test -f install.js
          test -f run.js
          echo "✓ NPM scripts present"

  # Final status check
  ci-success:
    name: CI Success
    needs: [pre-commit, quality, test, security, build-matrix, npm-structure]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.pre-commit.result }}" != "success" ]] || \
             [[ "${{ needs.quality.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]] || \
             [[ "${{ needs.build-matrix.result }}" != "success" ]] || \
             [[ "${{ needs.npm-structure.result }}" != "success" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          fi
          echo "✅ All CI jobs passed successfully"
